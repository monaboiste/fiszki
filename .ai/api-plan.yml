openapi: 3.0.3
info:
  title: "Fiszki API"
  description: "Comprehensive REST API for managing flashcards and AI-based flashcard generation."
  version: "1.0.0"
servers:
  - url: "http://localhost:3000/api"
    description: "Local development server"
paths:
  /flashcards:
    get:
      summary: "List flashcards"
      description: "Retrieve a paginated list of flashcards."
      security:
        - bearerAuth: []
      parameters:
        - name: "page"
          in: "query"
          description: "Page number for pagination."
          required: false
          schema:
            type: "integer"
            default: 1
        - name: "limit"
          in: "query"
          description: "Number of items per page."
          required: false
          schema:
            type: "integer"
            default: 10
        - name: "sort"
          in: "query"
          description: "Sort order for flashcards."
          required: false
          schema:
            type: "string"
            enum: ["created_at", "updated_at"]
            default: "created_at"
        - name: "filter"
          in: "query"
          description: "Filter criteria (e.g., type:manual)"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "A list of flashcards."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  flashcards:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Flashcard"
                  page:
                    type: "integer"
                  limit:
                    type: "integer"
                  total:
                    type: "integer"
    post:
      summary: "Create flashcards"
      description: "Creates multiple flashcards in a single request."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkCreateFlashcardsRequest"
            examples:
              example:
                value:
                  flashcards: [
                    { front: "Question 1", back: "Answer 1", type: "manual" },
                    { front: "Question 2", back: "Answer 2", type: "manual" }
                  ]
      responses:
        "201":
          description: "Bulk flashcards created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkCreateFlashcardsResponse"
        "400":
          description: "Invalid input."
  /flashcards/{flashcardId}:
    get:
      summary: "Retrieve a flashcard"
      description: "Gets details of a specific flashcard."
      security:
        - bearerAuth: []
      parameters:
        - name: "flashcardId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "Flashcard details retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flashcard"
        "404":
          description: "Flashcard not found."
    put:
      summary: "Update a flashcard"
      description: "Updates an existing flashcard."
      security:
        - bearerAuth: []
      parameters:
        - name: "flashcardId"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFlashcardRequest"
            examples:
              example:
                value:
                  front: "Updated question"
                  back: "Updated answer"
      responses:
        "200":
          description: "Flashcard updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateFlashcardResponse"
        "400":
          description: "Invalid input."
        "404":
          description: "Flashcard not found."
    delete:
      summary: "Delete a flashcard"
      description: "Deletes an existing flashcard."
      security:
        - bearerAuth: []
      parameters:
        - name: "flashcardId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "204":
          description: "Flashcard deleted successfully."
        "404":
          description: "Flashcard not found."
  /generations:
    post:
      summary: "Request AI to generate flashcards"
      description: "Initiate AI flashcard generation based on input text."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFlashcardProposalRequest"
            examples:
              example:
                value:
                  input_text: "Explain the theory of relativity."
      responses:
        "201":
          description: "Generation initiated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateFlashcardProposalResponse"
        "400":
          description: "Invalid input."
  /generations/{generationId}:
    get:
      summary: "Retrieve generation details"
      description: "Gets details of an AI generation event, including generated flashcards if available."
      security:
        - bearerAuth: []
      parameters:
        - name: "generationId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "Generation details retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Generation"
        "404":
          description: "Generation event not found."
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CreateUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
    CreateUserResponse:
      type: object
      properties:
        user_id:
          type: integer
        email:
          type: string
          format: email
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    Flashcard:
      type: object
      properties:
        flashcard_id:
          type: integer
        user_id:
          type: integer
        generation_id:
          type: integer
          nullable: true
        front:
          type: string
        back:
          type: string
        type:
          type: string
          enum: ["manual", "ai_generated", "ai_generated_modified"]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateFlashcardRequest:
      type: object
      required:
        - front
        - back
        - type
      properties:
        front:
          type: string
          maxLength: 200
        back:
          type: string
          maxLength: 500
        type:
          type: string
          enum: ["manual", "ai_generated", "ai_generated_modified"]
    CreateFlashcardResponse:
      type: object
      properties:
        flashcard_id:
          type: integer
        front:
          type: string
        back:
          type: string
        type:
          type: string
    BulkCreateFlashcardsRequest:
      type: object
      required:
        - flashcards
      properties:
        flashcards:
          type: array
          items:
            $ref: '#/components/schemas/CreateFlashcardRequest'
    BulkCreateFlashcardsResponse:
      type: object
      properties:
        flashcards:
          type: array
          items:
            $ref: '#/components/schemas/CreateFlashcardResponse'
    UpdateFlashcardRequest:
      type: object
      properties:
        front:
          type: string
          maxLength: 200
        back:
          type: string
          maxLength: 500
    UpdateFlashcardResponse:
      type: object
      properties:
        flashcard_id:
          type: integer
        front:
          type: string
        back:
          type: string
        type:
          type: string
    CreateFlashcardProposalRequest:
      type: object
      required:
        - input_text
      properties:
        input_text:
          type: string
          maxLength: 10000
    CreateFlashcardProposalResponse:
      type: object
      properties:
        proposed_flashcards:
          type: array
          items:
            $ref: '#/components/schemas/CreateFlashcardRequest'
        generation_id:
          type: integer
    Generation:
      type: object
      properties:
        generation_id:
          type: integer
        generation_duration_ms:
          type: integer
        input_text:
          type: string
        accepted:
          type: boolean
        model:
          type: string
        created_at:
          type: string
          format: date-time
        proposed_flashcards:
          type: array
          items:
            $ref: '#/components/schemas/CreateFlashcardRequest'
